apiVersion: v1
kind: Namespace
metadata:
  labels:
    istio-injection: enabled
  name: chip
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: chip
  name: chip
  namespace: chip
spec:
  replicas: 2
  selector:
    matchLabels:
      app: chip
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"           
      labels:
        app: chip
        name: chip
        version: v1
    spec:
      containers:
      - image: fidelissauro/chip:v2
        env:
        - name: VERSION
          value: "1.0"
        livenessProbe:
          failureThreshold: 10
          httpGet:
            httpHeaders:
            - name: Custom-Header
              value: Awesome
            path: /liveness
            port: 8080
          periodSeconds: 10
        name: chip
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 250m
            memory: 512m     
        startupProbe:
          failureThreshold: 10
          httpGet:
            path: /readiness
            port: 8080
          periodSeconds: 10
      terminationGracePeriodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: chip
  namespace: chip
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"    
  labels:
    app.kubernetes.io/name: chip
    app.kubernetes.io/instance: chip 
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
  selector:
    app: chip
  type: ClusterIP
---
# apiVersion: autoscaling/v2
# kind: HorizontalPodAutoscaler
# metadata:
#   name: chip
#   namespace: chip
# spec:
#   maxReplicas: 10
#   minReplicas: 4
#   metrics:
#     - type: Resource
#       resource:
#         name: cpu
#         target:
#           type: Utilization
#           averageUtilization: 60
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: Deployment
#     name: chip
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: chip-gateway
  namespace: chip
spec:
  selector:
    istio: ingress
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "chip.k8s.cluster.local"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: chip
  namespace: chip
spec:
  hosts:
  - "chip.k8s.cluster.local"
  gateways:
  - chip-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: chip
        port:
          number: 8080
    retries:
      # Retry Example
      attempts: 4
      perTryTimeout: 2s
      retryOn: gateway-error,connect-failure,refused-stream,5xx
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: chip-retry-counter
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      app: chip
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              local retries = request_handle:streamInfo():dynamicMetadata():get("envoy.retry_policy")["num_retries"]
              if retries then
                request_handle:headers():add("x-envoy-retry-count", retries)
              end
            end
# ---
# apiVersion: telemetry.istio.io/v1alpha1
# kind: Telemetry
# metadata:
#   name: retry-counter
#   namespace: istio-system
# spec:
#   metrics:
#   - providers:
#     - name: prometheus
#       tagOverrides:
#         retry-count:
#           operation: INSERT
#           value: request.headers["x-envoy-retry-count"]
